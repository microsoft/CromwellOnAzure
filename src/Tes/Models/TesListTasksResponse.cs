// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

/*
 * Task Execution Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Tes.Models
{
    /// <summary>
    /// ListTasksResponse describes a response from the ListTasks endpoint.
    /// </summary>
    [DataContract]
    public partial class TesListTasksResponse : IEquatable<TesListTasksResponse>
    {
        /// <summary>
        /// List of tasks.
        /// </summary>
        /// <value>List of tasks.</value>
        [DataMember(Name = "tasks")]
        public List<TesTask> Tasks { get; set; }

        /// <summary>
        /// Token used to return the next page of results. See TaskListRequest.next_page_token
        /// </summary>
        /// <value>Token used to return the next page of results. See TaskListRequest.next_page_token</value>
        [DataMember(Name = "next_page_token")]
        public string NextPageToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
            => new StringBuilder()
                .Append("class TesListTasksResponse {\n")
                .Append("  Tasks: ").Append(Tasks).Append('\n')
                .Append("  NextPageToken: ").Append(NextPageToken).Append('\n')
                .Append("}\n")
                .ToString();

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
            => JsonConvert.SerializeObject(this, Formatting.Indented);

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
            => obj switch
            {
                var x when x is null => false,
                var x when ReferenceEquals(this, x) => true,
                _ => obj.GetType() == GetType() && Equals((TesListTasksResponse)obj),
            };

        /// <summary>
        /// Returns true if TesListTasksResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TesListTasksResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TesListTasksResponse other)
            => other switch
            {
                var x when x is null => false,
                var x when ReferenceEquals(this, x) => true,
                _ =>
                (
                    Tasks == other.Tasks ||
                    Tasks is not null &&
                    Tasks.SequenceEqual(other.Tasks)
                ) &&
                (
                    NextPageToken == other.NextPageToken ||
                    NextPageToken is not null &&
                    NextPageToken.Equals(other.NextPageToken)
                ),
            };

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Tasks is not null)
                {
                    hashCode = hashCode * 59 + Tasks.GetHashCode();
                }

                if (NextPageToken is not null)
                {
                    hashCode = hashCode * 59 + NextPageToken.GetHashCode();
                }

                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(TesListTasksResponse left, TesListTasksResponse right)
            => Equals(left, right);

        public static bool operator !=(TesListTasksResponse left, TesListTasksResponse right)
            => !Equals(left, right);

#pragma warning restore 1591
        #endregion Operators
    }
}
